/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Store as PrismaStore,
  Staff as PrismaStaff,
  Template as PrismaTemplate,
  User as PrismaUser,
} from "@prisma/client";

export class StoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StoreCountArgs, "select">): Promise<number> {
    return this.prisma.store.count(args);
  }

  async stores<T extends Prisma.StoreFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreFindManyArgs>
  ): Promise<PrismaStore[]> {
    return this.prisma.store.findMany<Prisma.StoreFindManyArgs>(args);
  }
  async store<T extends Prisma.StoreFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreFindUniqueArgs>
  ): Promise<PrismaStore | null> {
    return this.prisma.store.findUnique(args);
  }
  async createStore<T extends Prisma.StoreCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreCreateArgs>
  ): Promise<PrismaStore> {
    return this.prisma.store.create<T>(args);
  }
  async updateStore<T extends Prisma.StoreUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreUpdateArgs>
  ): Promise<PrismaStore> {
    return this.prisma.store.update<T>(args);
  }
  async deleteStore<T extends Prisma.StoreDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StoreDeleteArgs>
  ): Promise<PrismaStore> {
    return this.prisma.store.delete(args);
  }

  async findStaffItems(
    parentId: string,
    args: Prisma.StaffFindManyArgs
  ): Promise<PrismaStaff[]> {
    return this.prisma.store
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .staffItems(args);
  }

  async findTemplates(
    parentId: string,
    args: Prisma.TemplateFindManyArgs
  ): Promise<PrismaTemplate[]> {
    return this.prisma.store
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .templates(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.store
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
