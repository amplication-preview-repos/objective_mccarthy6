/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Card as PrismaCard,
  Template as PrismaTemplate,
  User as PrismaUser,
} from "@prisma/client";

export class CardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CardCountArgs, "select">): Promise<number> {
    return this.prisma.card.count(args);
  }

  async cards<T extends Prisma.CardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CardFindManyArgs>
  ): Promise<PrismaCard[]> {
    return this.prisma.card.findMany<Prisma.CardFindManyArgs>(args);
  }
  async card<T extends Prisma.CardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CardFindUniqueArgs>
  ): Promise<PrismaCard | null> {
    return this.prisma.card.findUnique(args);
  }
  async createCard<T extends Prisma.CardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CardCreateArgs>
  ): Promise<PrismaCard> {
    return this.prisma.card.create<T>(args);
  }
  async updateCard<T extends Prisma.CardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CardUpdateArgs>
  ): Promise<PrismaCard> {
    return this.prisma.card.update<T>(args);
  }
  async deleteCard<T extends Prisma.CardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CardDeleteArgs>
  ): Promise<PrismaCard> {
    return this.prisma.card.delete(args);
  }

  async getTemplate(parentId: string): Promise<PrismaTemplate | null> {
    return this.prisma.card
      .findUnique({
        where: { id: parentId },
      })
      .template();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.card
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
